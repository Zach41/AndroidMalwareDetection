#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import print_function
import subprocess
import sys
from os import path
import os
import json

from count_apis import count_apis
from count_permissions import check_permission


def _check_status(code):
    if code != 0:
        print("error occurred.", file=sys.stderr)
        sys.exit(code)


def generate_apk_data(sqlite_file, manifest_file, output):
    if (not path.exists(sqlite_file)) or (not path.exists(manifest_file)):
        print("file not exists", file=sys.stderr)

    (cnt_apis, data_apis, total_calls) = count_apis(sqlite_file)
    permissions = check_permission(manifest_file)
    out_obj = {
        "total_calls": total_calls,
        "cnt_apis": cnt_apis,
        "data_apis": data_apis,
        "permissions": permissions
    }
    out_str = json.dumps(out_obj)
    with open(output, 'w') as f:
        f.write(out_str)


def analyze_apk(apk_file, out_dir):
    if not path.exists(apk_file):
        print("%s not exists" % apk_file)
        sys.exit(1)

    ret = subprocess.call(["apktool", "d", apk_file])
    _check_status(ret)
    (dirname, filename) = path.split(apk_file)
    output = "output.sqlite"
    location = path.join(filename[:-4], "smali")
    ret = subprocess.call([
        "smalisca", "parser", "-l", location, "-s", "smali", "-f", "sqlite",
        "-o", output
    ])
    manifest_file = path.join(filename[:-4], "AndroidManifest.xml")
    _check_status(ret)
    out_file = path.join(out_dir, filename[:-4] + '.txt')
    generate_apk_data(output, manifest_file, out_file)

    # remove generated files
    ret = subprocess.call(["rm", "-rf", filename[:-4]])
    _check_status(ret)
    ret = subprocess.call(["rm", '-f', output])
    _check_status(ret)


# if __name__ == '__main__':
#     dirname = "/Users/Zach/Desktop/Zach/test-apks3/"
#     for filename in os.listdir(dirname):
#         abs_file = path.join(dirname, filename)
#         analyze_apk(abs_file)
