#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import print_function
import json
import sys
import subprocess
from os import path
from sklearn import tree

from dump_apk_feature import get_apk_feature_json
from generate_apkdata import analyze_apk


def _training_data():
    feature_vec = []
    labels = []
    with open("malwares.txt") as fr:
        arr = json.load(fr)
        feature_vec.extend(arr)
        labels.extend([1] * len(arr))
    with open("non_malwares.txt") as fr:
        arr = json.load(fr)
        feature_vec.extend(arr)
        labels.extend([0] * len(arr))
    return feature_vec, labels


def classify(filename):
    if not filename.endswith(".apk"):
        print("invalid apk file.", file=sys.stderr)
        sys.exit(1)
    api_key = []
    with open("api_key.txt", 'r') as fr:
        api_key.extend(json.load(fr))

    analyze_apk(filename, "")
    test_file = path.split(filename)[1][:-4] + '.txt'
    feature_vec = get_apk_feature_json(test_file, api_key)
    subprocess.call(["rm", "-f", test_file])
    clf = tree.DecisionTreeClassifier()
    feature_vecs, labels = _training_data()
    clf.fit(feature_vecs, labels)
    return clf.predict([feature_vec])[0]


if __name__ == '__main__':
    if len(sys.argv) < 2:
        print("usage: %s <filename>" % sys.argv[0], file=sys.stderr)
    filename = sys.argv[1]
    if classify(filename):
        print("Malware")
    else:
        print("NonMalware")
