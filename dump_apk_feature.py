#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import print_function
from os import path
import os
import sys
import json
import subprocess

from count_permissions import permission_list
from generate_apkdata import analyze_apk

# API_KEY = [
#     'Landroid/content/BroadcastReceiver/<init>',
#     'Landroid/content/pm/PackageManager/checkPermission',
#     'Landroid/content/pm/PackageManager/getActivityInfo',
#     'Landroid/content/pm/PackageManager/getApplicationInfo',
#     'Landroid/content/pm/PackageManager/getInstalledPackages',
#     'Landroid/content/pm/PackageManager/getLaunchIntentForPackage',
#     'Landroid/content/pm/PackageManager/getPackageArchiveInfo',
#     'Landroid/content/pm/PackageManager/getPackageInfo',
#     'Landroid/content/pm/PackageManager/printStackTrace',
#     'Landroid/content/pm/PackageManager/queryIntentActivities',
#     'Landroid/ppcontent/pm/PackageManager/resolveActivity',
#     'Landroid/net/ConnectivityManager/getActiveNetworkInfo',
#     'Landroid/net/ConnectivityManager/getAllNetworkInfo',
#     'Landroid/net/ConnectivityManager/getNetworkInfo',
#     'Landroid/net/wifi/WifiManager/getConnectionInfo',
#     'Landroid/telephony/SmsManager/divideMessage',
#     'Landroid/telephony/SmsManager/getDefault',
#     'Landroid/telephony/SmsManager/sendTextMessage',
#     'Landroid/telephony/TelephonyManager/getCellLocation',
#     'Landroid/telephony/TelephonyManager/getDeviceId',
#     'Landroid/telephony/TelephonyManager/getLine1Number',
#     'Landroid/telephony/TelephonyManager/getNetworkCountryIso',
#     'Landroid/telephony/TelephonyManager/getNetworkOperator',
#     'Landroid/telephony/TelephonyManager/getNetworkOperatorName',
#     'Landroid/telephony/TelephonyManager/getNetworkType',
#     'Landroid/telephony/TelephonyManager/getPhoneType',
#     'Landroid/telephony/TelephonyManager/getSimCountryIso',
#     'Landroid/telephony/TelephonyManager/getSimOperator',
#     'Landroid/telephony/TelephonyManager/getSimOperatorName',
#     'Landroid/telephony/TelephonyManager/getSimSerialNumber',
#     'Landroid/telephony/TelephonyManager/getSubscriberId',
#     'Ldalvik/system/DexClassLoader/<init>',
#     'Ldalvik/system/DexClassLoader/loadClass'
# ]


def dump_analysis_files(dirname, tmp_dir):
    if not path.exists(dirname):
        print("%s not exist." % dirname, file=sys.stderr)
    for apk_file in os.listdir(dirname):
        if not apk_file.endswith(".apk"):
            print("invalid apk file: %s" % apk_file, file=sys.stderr)
            sys.exit(1)
        if path.exists(tmp_dir):
            subprocess.call(["rm", "-rf", tmp_dir])
        os.mkdir(tmp_dir)

        analyze_apk(path.join(dirname, apk_file), tmp_dir)


def generate_all_api_feature(dirname):
    if not path.exists(dirname):
        print("directory not exists.", file=sys.stderr)
    files = os.listdir(dirname)
    ret = []
    for fname in files:
        filename = path.join(dirname, fname)
        with open(filename, 'r') as fr:
            data = json.load(fr)
            for api_list in data["data_apis"].values():
                ret.extend(api_list)
    with open("api_key.txt", "w") as fw:
        json.dump(sorted(list(set(ret))), fw)


def get_training_data(dirname, output):
    api_key = []
    with open("api_key.txt") as fr:
        data = json.load(fr)
        api_key.extend(data)
    feature_vecs = []
    for filename in os.listdir(dirname):
        feature_vecs.append(
            get_apk_feature_json(path.join(dirname, filename), api_key))
    with open(output, "w") as fw:
        json.dump(feature_vecs, fw)


def get_apk_feature_json(filename, API_KEY):
    if not path.exists(filename):
        print("%s not exists." % filename, file=sys.stderr)
        sys.exit(1)
    feature_vec = [0] * (len(API_KEY) + len(permission_list))
    with open(filename, 'r') as fr:
        data = json.load(fr)
        for idx in range(len(permission_list)):
            if permission_list[idx] in data["permissions"]:
                feature_vec[idx] = 1
        apis = []
        for api_list in data["data_apis"].values():
            apis.extend(api_list)
        apis = set(apis)

        for idx in range(len(API_KEY)):
            if API_KEY[idx] in apis:
                feature_vec[len(permission_list) + idx] = 1
    return feature_vec


if __name__ == "__main__":
    if len(sys.argv) < 3:
        print("usage: %s <malwares dir> <nonmalwares dir>" % sys.argv[0])
        sys.exit(1)
    dump_analysis_files(sys.argv[1], "malwares")
    dump_analysis_files(sys.argv[2], "non_malwares")
    generate_all_api_feature("malwares")
    get_training_data("malwares", "malwares.txt")
    get_training_data("non_malwares", "non_malwares.txt")
    subprocess.call(["rm", "-rf", "malwares"])
    subprocess.call(["rm", "-rf", "non_malwares"])
